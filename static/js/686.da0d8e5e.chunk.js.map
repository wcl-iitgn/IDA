{"version":3,"file":"static/js/686.da0d8e5e.chunk.js","mappings":"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","sources":["components/BaseMap.js","components/SearchBar.js","components/Legend.js","pages/FiltererdJsonData.js","pages/ExportMapButton.js","pages/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import indiastates  from '../assets/data/indiaStates.json';\nimport indiaRivers  from '../assets/data/indiaRivers.json';\n\n\n\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\n\n\n\nconst layers = [\n  {\n    name: \"Google Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  },\n  // {\n  //   name: \"Open Street Map\",\n  //   url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  //   subdomains: ['a', 'b', 'c']\n  // },\n  {\n    name: \"Topographic Map\",\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    subdomains: ['a', 'b', 'c']\n  },\n  {\n    name: \"Satellite Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  }\n\n]\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([23, 84], 5);\n\n  };\n\n\n\n\n  return (\n    <>\n      <LayersControl position=\"topright\" collapsed={true}>\n        {layers.map((layer, index) => {\n          return (\n            <LayersControl.BaseLayer\n              key={index}\n              checked={index === 0 ? true : false}\n              name={layer.name}\n            >\n              <TileLayer\n                attribution={layer.attribution}\n                url={layer.url}\n                subdomains={layer.subdomains}\n              />\n            </LayersControl.BaseLayer>\n          )\n        })}\n\n\n\n\n        \n\n        {/* <LayersControl.Overlay checked name=\"States Boundary\">\n          <FeatureGroup>\n            \n            <GeoJSON data={indiastates.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'black',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay> */}\n\n\n        <LayersControl.Overlay name=\"Rivers\">\n          <FeatureGroup>\n            <GeoJSON data={indiaRivers.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'blue',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay>\n\n\n      </LayersControl>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMap","import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import React from 'react'\nconst Legend = () => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Drought Category (based on SPEI)</p>\n                    </div>\n                    <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div>\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: 'brown'}}></i>\n                        <i style={{backgroundColor: 'red'}}></i>\n                        <i style={{backgroundColor: 'orange'}}></i>\n                        <i style={{backgroundColor: 'rgb(252, 214, 148)'}}></i>\n                        <i style={{backgroundColor: 'yellow'}}></i>\n                        <i style={{backgroundColor: 'white'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> -3.0</p>\n                        <p className=\"legend-num-value\"> -2.0</p>\n                        <p className=\"legend-num-value\"> -1.6</p>\n                        <p className=\"legend-num-value\"> -1.3</p>\n                        <p className=\"legend-num-value\"> -0.8</p>\n                        <p className=\"legend-num-value\"> -0.5</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default Legend","import React, { useEffect } from 'react';\nimport { GeoJSON, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\n\nconst FiltererdJsonData = ({\n    selectedState,\n    selectedDistrict,\n    selectedTehsil,\n    DistrictStyle,\n    filteredIndiaDistrict,\n    DistrictOnEachfeature,\n}) => {\n    const map = useMap();\n\n    useEffect(() => {\n        if (filteredIndiaDistrict.features.length > 0) {\n            const bounds = filteredIndiaDistrict.features.reduce((acc, feature) => {\n                const featureBounds = L.geoJSON(feature.geometry).getBounds();\n                return acc.extend(featureBounds);\n            }, new L.LatLngBounds());\n\n            map.flyToBounds(bounds);\n        }\n    }, [filteredIndiaDistrict, map]);\n\n\n    return (\n        <GeoJSON\n            key={`${selectedState}-${selectedDistrict}-${selectedTehsil}`}\n            style={DistrictStyle}\n            data={filteredIndiaDistrict.features}\n            onEachFeature={DistrictOnEachfeature}\n        />\n    );\n};\n\nexport default FiltererdJsonData;\n","import React, { useState } from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { AiFillPrinter } from 'react-icons/ai';\nimport { useAlertContext } from '../context/AlertContext';\nimport Logo from \"../assets/images/export-logo.jpg\"\nimport MobileLegend from \"../assets/images/mobile-map-legend.jpg\"\n\nconst ExportMapButton = ({ mapContainerRef , selectedYear ,selectedSession}) => {\n\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n\n        const logo = new Image();\n        logo.src = Logo;\n\n        setAlertMessage('Map is downloading..')\n        setShowAlert(true)\n\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n\n                        // Original Width=450px, Height=100px\n                        const logoWidth = 150; // Adjust the width of the logo as needed\n                        const logoHeight = 33.333;\n                        // const logoX = (pdf.internal.pageSize.getWidth() - logoWidth) / 2;\n                        const logoX = 10;\n                        const logoY = 6; // Adjust the Y-coordinate for the logo placement\n                        pdf.addImage(logo, 'PNG', logoX, logoY, logoWidth, logoHeight);\n\n\n                        // Add title at the top\n                        // const title = mapTitle;\n                        // const titleFontSize = 16;\n                        // const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        // const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        // const titleTextY = 20; // Y-coordinate for the title\n\n                        // pdf.setFontSize(titleFontSize);\n                        // pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            // Mobile legend size Width 400, height 100\n\n\n\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 80; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n\n\n                            const LegendWidth = 133.33; // Adjust the width of the logo as needed\n                            const LegendHeight = 33.33;\n                            // const logoX = (pdf.internal.pageSize.getWidth() - logoWidth) / 2;\n                            const LegendX = pdf.internal.pageSize.getWidth() - pdfWidth + LegendWidth;\n                            const LegendY = pdf.internal.pageSize.getHeight() - LegendHeight - 80; // Adjust the Y-coordinate for the logo placement\n                            pdf.addImage(MobileLegend, 'PNG', LegendX, LegendY, LegendWidth, LegendHeight);\n\n\n                            const websiteName = `Drought Condition of ${selectedSession} for year ${selectedYear}`;\n                            const fontSize = 12;\n                            const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                            const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                            const textY = pdf.internal.pageSize.getHeight() - 25;\n\n                            pdf.setFontSize(fontSize);\n                            pdf.text(textX, textY, websiteName);\n\n\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth(); // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This map has been downloaded from DROUGHT ATLAS OF INDIA (www.indiadroughtatlas.in)';\n                        const fontSize = 8;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.4, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('map.pdf', pdfOptions);\n\n                        setAlertMessage('Map has been exported as PDF successfully!')\n                        setShowAlert(true)\n\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                setAlertMessage('Error exporting map image:', error)\n                setShowAlert(true)\n\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"print_map_btn\">\n            <AiFillPrinter />\n        </button>\n\n\n    )\n}\n\nexport default ExportMapButton","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport indiaDistrict from '../assets/data/indiaDistrict.json';\nimport Legend from '../components/Legend';\nimport indiastates from '../assets/data/indiaStates.json';\nimport PlaceAttributes from \"../assets/data/PlaceAttributes.json\";\nimport { Box } from \"@mui/system\";\nimport FiltererdJsonData from './FiltererdJsonData';\nimport ExportMapButton from './ExportMapButton';\n\n\n\nconst Dashboard = () => {\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [selectedData, setSelectedData] = useState(null);\n  const [droughtArea, setDroughtArea] = useState(null);\n  const [droughtIntensity, setDroughtIntensity] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [districtList, setDistrictList] = useState([]);\n  const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n  const [tehsilList, setTehsilList] = useState([]);\n  const [selectedState, setSelectedState] = useState([]);\n  const [selectedDistrict, setSelectedDistrict] = useState([]);\n  const [selectedTehsil, setSelectedTehsil] = useState([]);\n\n  const mapContainerRef = useRef(null);\n\n\n  const handleStateSelect = (event, value) => {\n    let items = PlaceAttributes.filter((item) => item.STATE === value);\n    items = [...new Set(items.map((item) => item))];\n    items.sort();\n\n    setDistrictList(items);\n    setSelectedState(value)\n\n\n    // Filter indiaDistrict features based on the selected state\n    let filteredStateFeatures = indiaDistrict.features.filter((feature) => feature.properties.STATE === value);\n\n    // const bounds = filteredStateFeatures.reduce((acc, feature) => {\n    //   const coordinates = feature.geometry.coordinates[0];\n    //   return acc.extend(coordinates);\n    // }, new L.LatLngBounds());\n\n    setFilteredIndiaDistrict({\n      type: \"FeatureCollection\",\n      features: filteredStateFeatures,\n    });\n\n    // mapRef.current.flyToBounds(bounds, { padding: [10, 10] });\n\n\n\n  };\n\n\n\n\n\n  const handleDistrictSelect = (event, value) => {\n    let items = districtList.filter((item) => item.DISTRICT === value);\n    items = [...new Set(items.map((item) => item))];\n    items.sort();\n\n    setTehsilList(items);\n    setSelectedDistrict(value)\n\n    let filteredDistrictFeatures = indiaDistrict.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n    setFilteredIndiaDistrict({\n      type: \"FeatureCollection\",\n      features: filteredDistrictFeatures,\n    });\n\n  };\n\n  const handleTehsilSelect = (event, value) => {\n    setSelectedTehsil(value)\n\n    let filteredTehsilFeatures = indiaDistrict.features.filter((feature) => feature.properties.TEHSIL === value && feature.properties.DISTRICT === selectedDistrict && feature.properties.STATE === selectedState);\n    setFilteredIndiaDistrict({\n      type: \"FeatureCollection\",\n      features: filteredTehsilFeatures,\n    });\n  };\n\n\n  const handleYearChange = (event, value) => {\n    setSelectedYear(value);\n  };\n\n\n  const handleSessionChange = (event, value) => {\n    setSelectedSession(value);\n  };\n\n\n  function setInitialMapZoom() {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n      mapZoom = [4];\n    } if (viewportWidth >= [768]) {\n      mapZoom = [4.5];\n    } if (viewportWidth >= [1600]) {\n      mapZoom = [5];\n    }\n    return mapZoom;\n  }\n\n  const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n      dragging = false;\n    } if (viewportWidth >= [768]) {\n      dragging = true;\n    }\n    return dragging;\n  }\n\n\n  useEffect(() => {\n    if (selectedSession && selectedYear) {\n      const fetchData = async () => {\n        try {\n          setLoading(true);\n\n          const formattedSession = selectedSession.replace(/\\s+/g, '_');\n\n          // Fetching data from the API\n          const response = await fetch(`https://india-drought-monitor.github.io/india-drought-atlas-data/${formattedSession}.json`);\n          const droughtData = await response.json();\n\n          // Fetching area data from the API\n          const areaResponse = await fetch(`https://india-drought-monitor.github.io/india-drought-atlas-data/Area.json`);\n          const droughtArea = await areaResponse.json();\n\n          // Fetching intensity data from the API\n          const intensityResponse = await fetch(`https://india-drought-monitor.github.io/india-drought-atlas-data/Intensity.json`);\n          const droughtIntensity = await intensityResponse.json();\n\n\n          const filteredDroughtArea = droughtArea.filter(data => data.Year === parseInt(selectedYear) && data[formattedSession]);\n          const filteredDroughtIntensity = droughtIntensity.filter(data => data.Year === parseInt(selectedYear) && data[formattedSession]);\n\n          if (filteredDroughtArea.length > 0) {\n            const selectedDroughtValue = filteredDroughtArea[0][formattedSession];\n\n            if (selectedDroughtValue !== undefined) {\n              setDroughtArea(selectedDroughtValue);\n            } else {\n              setDroughtArea(null);\n            }\n          } else {\n            setDroughtArea(null);\n          }\n\n          if (filteredDroughtIntensity.length > 0) {\n            const selectedIntensityValue = filteredDroughtIntensity[0][formattedSession];\n\n            if (selectedIntensityValue !== undefined) {\n              setDroughtIntensity(selectedIntensityValue);\n            } else {\n              setDroughtIntensity(null);\n            }\n          } else {\n            setDroughtIntensity(null);\n          }\n\n          setSelectedData(droughtData);\n          setLoading(false);\n\n        } catch (error) {\n          console.error(\"Error fetching and filtering wind data:\", error);\n        }\n      };\n      fetchData();\n    }\n  }, [selectedSession, selectedYear]);\n\n\n  const maxBounds = L.latLngBounds(\n    L.latLng(4, 60),  // Southwest corner of the bounds\n    L.latLng(45, 110)  // Northeast corner of the bounds\n  );\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const summerDataItem = selectedData.find(item => item.ID === feature.properties.ID.toString());\n      if (selectedYear && feature.properties && feature.properties.ID) {\n        const popupContent = `\n          <div>\n            ID: ${feature.properties.ID}<br/>\n            DISTRICT: ${feature.properties.DISTRICT}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            TEHSIL: ${feature.properties.TEHSIL}<br/>\n            VALUE: ${summerDataItem ? summerDataItem[selectedYear] : null}\n          </div>\n        `;\n        layer.bindTooltip(popupContent, { sticky: true });\n      }\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n\n  const DistrictDensity = (density => {\n    return density > -0.5\n      ? 'white'\n      : density > -0.8\n        ? 'yellow'\n        : density > -1.3\n          ? 'rgb(252, 214, 148)'\n          : density > -1.6\n            ? 'orange'\n            : density > -2\n              ? 'red'\n              : density > -3\n                ? 'brown'\n                : 'brown';\n  })\n\n\n\n\n  const DistrictStyle = (feature => {\n    if (selectedYear) {\n      const getDensityFromSummerData = (id) => {\n        const summerDataItem = selectedData.find(item => item.ID === id.toString());\n        return summerDataItem ? summerDataItem[selectedYear] : null;\n\n      };\n\n      const density = getDensityFromSummerData(feature.properties.ID);\n      return ({\n        fillColor: DistrictDensity(density),\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n\n  });\n\n\n\n\n\n\n\n  // const DistrictStyle = (feature => {\n  //   return ({\n  //     fillColor: DistrictDensity(feature.properties.ID),\n  //     weight: 1,\n  //     opacity: 1,\n  //     color: 'black',\n  //     dashArray: '2',\n  //     fillOpacity: 1\n  //   });\n  // });\n\n  return (\n    <div className='dasboard_page_container'>\n\n      <div className='main_dashboard'>\n        <div className='left_panel'>\n\n          <div className='border border-secondary p-2 mb-2'>\n            <Autocomplete\n              onChange={(event, value) => handleYearChange(event, value)}\n              id=\"year\"\n              options={Array.from({ length: 2020 - 1900 }, (_, index) => `${1901 + index}`)}\n              noOptionsText=\"No Available Data\"\n              renderOption={(props, year) => (\n                <Box component=\"li\" {...props} key={year}\n                  sx={{\n                    fontSize: \"14px\",\n                  }}>\n                  {year}\n                </Box>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Select Year\"\n                  className=\"form-select\"\n                  aria-label=\"Default select example\"\n                  value={selectedYear}\n                />\n              )}\n            />\n\n          </div>\n\n          <div className='border border-secondary p-2 mb-2'>\n            <Autocomplete\n              onChange={handleSessionChange}\n              id=\"session\"\n              options={[\n                \"Summer Monsoon\",\n                \"Winter Monsoon\",\n                \"Calendar Year\",\n                \"Water Year\",\n              ]}\n              renderInput={(params) => (\n                <TextField {...params} className=\"form-select mb-3\" label=\"Select Season\" />\n              )}\n            />\n\n            <label className=\"form-label\">or</label><br />\n\n            <Autocomplete\n              onChange={handleSessionChange}\n              id=\"month\"\n              options={[\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\n              ]}\n              renderInput={(params) => (\n                <TextField {...params} className=\"form-select mb-3\" label=\"Select Month\" />\n              )}\n            />\n          </div>\n\n          <div className='border border-secondary p-2 mb-2'>\n            <label className=\"form-label\">Filter Data:</label>\n\n            <Autocomplete\n              style={{ marginBottom: \"20px\" }}\n              onChange={(event, value) => handleStateSelect(event, value)}\n              id=\"state\"\n              getOptionLabel={(state) => `${state}`}\n              options={[...new Set(PlaceAttributes.map((item) => item.STATE))]}\n              isOptionEqualToValue={(option, value) => option.Name === value.Name}\n              noOptionsText={\"No Available Data\"}\n              // disabled={!selectedData}\n              renderOption={(props, state) => (\n                <Box component=\"li\" {...props} key={state}\n                  sx={{\n                    fontSize: \"14px\",\n                  }}>\n                  {state}\n                </Box>\n              )}\n              renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n            />\n\n            <Autocomplete\n              style={{ marginBottom: \"20px\" }}\n              onChange={(event, value) => handleDistrictSelect(event, value)}\n              id=\"district\"\n              getOptionLabel={(district) => `${district}`}\n              options={[...new Set(districtList.map((item) => item.DISTRICT))]}\n              isOptionEqualToValue={(option, value) => option.Name === value.Name}\n              noOptionsText={\"No Available Data\"}\n              disabled={districtList.length === 0}\n              renderOption={(props, district) => (\n                <Box component=\"li\" {...props} key={district}\n                  sx={{\n                    fontSize: \"14px\",\n                  }}>\n                  {district}\n                </Box>\n              )}\n              renderInput={(params) => <TextField {...params}\n\n                label=\"Search District\" />}\n            />\n\n            <Autocomplete\n              onChange={(event, value) => handleTehsilSelect(event, value)}\n              id=\"tehsil\"\n              disabled={tehsilList.length === 0}\n              getOptionLabel={(tehsil) => `${tehsil}`}\n              options={[...new Set(tehsilList.map((item) => item.TEHSIL))]}\n              isOptionEqualToValue={(option, value) => option.Name === value.Name}\n              noOptionsText={\"No Available Data\"}\n              renderOption={(props, tehsil) => (\n                <Box component=\"li\" {...props} key={tehsil}\n                  sx={{\n                    fontSize: \"14px\",\n                  }}>\n                  {tehsil}\n                </Box>\n              )}\n              renderInput={(params) => <TextField {...params} label=\"Search Tehsil\" />}\n            />\n\n          </div>\n\n\n\n        </div>\n\n        {selectedSession && selectedYear && selectedData && (\n          <>\n\n            <div className='drought_details_container_mobile'>\n              <div className='border border-secondary p-2'>\n                <p><strong> Selected Year: </strong> {selectedYear}</p>\n                <p><strong>Selected Season/Month: </strong>{selectedSession}</p>\n                <p><strong>Drought Area (All India): </strong>{droughtArea} Mkm<sup>2</sup></p>\n                <p><strong>Mean Intensity (All India): </strong>{droughtIntensity}</p>\n              </div>\n            </div>\n          </>\n\n\n        )}\n\n        <div className='right_panel' ref={mapContainerRef}>\n\n          <MapContainer\n            fullscreenControl={true}\n\n            center={[23, 84]}\n            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n            zoom={setInitialMapZoom()}\n            maxBounds={maxBounds}\n            // maxZoom={8}\n            minZoom={setInitialMapZoom()}\n            keyboard={false}\n            dragging={setDragging()}\n            // attributionControl={false}\n            // scrollWheelZoom={false}\n            doubleClickZoom={false}\n          >\n            <SearchBar />\n            <ExportMapButton mapContainerRef={mapContainerRef} selectedYear={selectedYear} selectedSession={selectedSession}  />\n\n\n\n\n\n            {selectedSession && selectedYear && selectedData && (\n              <>\n                <div className='drought_details_container_desktop'>\n                  <p><strong> Selected Year: </strong> {selectedYear}</p>\n                  <p><strong>Selected Season/Month: </strong>{selectedSession}</p>\n                  <p><strong>Drought Area (All India): </strong>{droughtArea} Mkm<sup>2</sup></p>\n                  <p><strong>Mean Intensity (All India): </strong>{droughtIntensity}</p>\n                </div>\n\n                {filteredIndiaDistrict ? (\n                  <FiltererdJsonData selectedState={selectedState}\n                    selectedDistrict={selectedDistrict}\n                    selectedTehsil={selectedTehsil}\n                    DistrictStyle={DistrictStyle}\n                    filteredIndiaDistrict={filteredIndiaDistrict}\n                    DistrictOnEachfeature={DistrictOnEachfeature} />\n\n\n                ) : (\n                  <GeoJSON\n                    style={DistrictStyle}\n                    data={indiaDistrict.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n\n                )}\n\n\n                <GeoJSON data={indiastates.features} style={{\n                  fillColor: 'none',\n                  weight: 2,\n                  color: 'black',\n                  interactive: false\n                }} />\n\n\n                <div className=\"legend-panel-desktop\">\n                  <Legend />\n                </div>\n              </>\n\n\n            )}\n\n\n            <BaseMap />\n\n          </MapContainer>\n\n\n          <div className=\"legend-panel-mobile\">\n            <Legend />\n          </div>\n\n\n          {loading && (\n            <div className='map_layer_loader_container_desktop'>\n              <div className=\"map_loader_container\">\n                <span className=\"map_loader\"></span>\n              </div>\n\n            </div>\n\n          )}\n\n        </div>\n\n\n        {loading && (\n          <div className='map_layer_loader_container_mobile'>\n            <div className=\"map_loader_container\">\n              <span className=\"map_loader\"></span>\n            </div>\n\n          </div>\n\n        )}\n\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Dashboard"],"names":["layers","name","url","subdomains","BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","LayersControl","position","collapsed","layer","index","_jsx","BaseLayer","checked","TileLayer","attribution","Overlay","FeatureGroup","GeoJSON","data","indiaRivers","style","fillColor","weight","color","interactive","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","addControl","removeControl","Legend","backgroundColor","_ref","selectedState","selectedDistrict","selectedTehsil","DistrictStyle","filteredIndiaDistrict","DistrictOnEachfeature","features","length","bounds","reduce","acc","feature","featureBounds","geometry","getBounds","extend","flyToBounds","onEachFeature","concat","mapContainerRef","selectedYear","selectedSession","setAlertMessage","setShowAlert","useAlertContext","handleExportMapPDF","mapContainer","current","viewportWidth","window","innerWidth","logo","Image","src","Logo","options","width","offsetWidth","height","offsetHeight","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","onload","aspectRatio","pdfOrientation","pdf","jsPDF","addImage","pdfHeight","internal","pageSize","getHeight","pdfWidth","x","getWidth","y","LegendWidth","LegendHeight","LegendX","LegendY","websiteName","fontSize","textWidth","getStringUnitWidth","scaleFactor","textX","textY","setFontSize","text","save","compress","quality","result","readAsDataURL","catch","error","AiFillPrinter","Dashboard","setSelectedYear","setSelectedSession","selectedData","setSelectedData","droughtArea","setDroughtArea","droughtIntensity","setDroughtIntensity","loading","setLoading","districtList","setDistrictList","setFilteredIndiaDistrict","tehsilList","setTehsilList","setSelectedState","setSelectedDistrict","setSelectedTehsil","useRef","handleSessionChange","event","value","setInitialMapZoom","mapZoom","fetchData","async","formattedSession","replace","response","fetch","droughtData","json","areaResponse","intensityResponse","filteredDroughtArea","filter","Year","parseInt","filteredDroughtIntensity","selectedDroughtValue","undefined","selectedIntensityValue","console","maxBounds","on","summerDataItem","find","item","ID","properties","toString","popupContent","DISTRICT","STATE","TEHSIL","bindTooltip","sticky","openTooltip","closeTooltip","DistrictDensity","density","id","getDensityFromSummerData","opacity","dashArray","fillOpacity","Autocomplete","onChange","handleYearChange","Array","from","_","noOptionsText","renderOption","props","year","_createElement","Box","component","key","sx","renderInput","params","TextField","label","marginBottom","handleStateSelect","items","PlaceAttributes","Set","sort","filteredStateFeatures","indiaDistrict","type","getOptionLabel","state","isOptionEqualToValue","option","Name","handleDistrictSelect","filteredDistrictFeatures","district","disabled","handleTehsilSelect","filteredTehsilFeatures","tehsil","ref","MapContainer","fullscreenControl","center","border","margin","zoom","minZoom","keyboard","dragging","setDragging","doubleClickZoom","ExportMapButton","FiltererdJsonData","indiastates"],"sourceRoot":""}